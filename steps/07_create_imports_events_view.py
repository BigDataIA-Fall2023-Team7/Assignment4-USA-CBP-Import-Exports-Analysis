from snowflake.snowpark import Session
#import snowflake.snowpark.types as T
import snowflake.snowpark.functions as F


SQL_V_FLAT_IMPORTS_EVENT = """
CREATE OR REPLACE VIEW V_FLAT_IMPORTS_EVENTS AS 
(with IMPORTS_DURING_EVENTS as
(SELECT DISTINCT e.EVENT_ID, e.EVENT_FIRST_DATE, e.EVENT_LAST_UPDATE_DATE, i.ACTUAL_DATE_OF_ARRIVAL, 
        i.ESTIMATED_ARRIVAL_DATE, 
        i.MASTER_BILL_OF_LADING_NUMBER, 
        i.HOUSE_BILL_OF_LADING_NUMBER, 
        i.FOREIGN_PORT_OF_LADING, 
        i.PLACE_OF_RECEIPT, 
        i.PORT_OF_UNLADING, 
        i.PRODUCT_KEYWORDS,
        i.ESTIMATED_SHIPMENT_VALUE, 
        i.TOTAL_WEIGHT, 
        i.TOTAL_WEIGHT_UNIT, 
        i.MEASUREMENT, 
        i.MEASUREMENT_UNIT
FROM
    (SELECT EVENT_ID, min(EVENT_PUBLICATION_DATE) as EVENT_FIRST_DATE, max(EVENT_UPDATE_DATE) AS EVENT_LAST_UPDATE_DATE
    FROM USA_CBP.EVENTS 
    GROUP BY EVENT_ID
    ) e,
    (SELECT DISTINCT
        ACTUAL_DATE_OF_ARRIVAL, 
        ESTIMATED_ARRIVAL_DATE, 
        MASTER_BILL_OF_LADING_NUMBER, 
        HOUSE_BILL_OF_LADING_NUMBER, 
        FOREIGN_PORT_OF_LADING, 
        PLACE_OF_RECEIPT, 
        PORT_OF_UNLADING, 
        PRODUCT_KEYWORDS,
        ESTIMATED_SHIPMENT_VALUE, 
        TOTAL_WEIGHT, 
        TOTAL_WEIGHT_UNIT, 
        MEASUREMENT, 
        MEASUREMENT_UNIT
    FROM USA_CBP.IMPORTS) i
WHERE 
    -- month(to_date(i.ESTIMATED_ARRIVAL_DATE)) = month(e.EVENT_LAST_UPDATE_DATE)
    i.ESTIMATED_ARRIVAL_DATE >= DATEADD(day, -1, e.EVENT_LAST_UPDATE_DATE::DATE)
    AND i.ESTIMATED_ARRIVAL_DATE <= DATEADD(day, 1, e.EVENT_LAST_UPDATE_DATE::DATE)
)
    
SELECT 
e.EVENT_ID as EVENT_ID, 
e.EVENT_PUBLICATION_DATE as EVENT_PUBLICATION_DATE,
e.EVENT_UPDATE_DATE as EVENT_UPDATE_DATE,
e.EVENT_WARROOM_TITLE as EVENT_WARROOM_TITLE, 
e.EVENT_TYPE as EVENT_TYPE, 
e.EVENT_SEVERITY as EVENT_SEVERITY,
e.EVENT_DESCRIPTION as EVENT_DESCRIPTION, 
e.EVENT_SUMMARY as EVENT_SUMMARY, 
e.EVENT_REGIONS_POTENTIALLY_AFFECTED as REGIONS_POTENTIALLY_AFFECTED,
e.EVENT_INDUSTRIES_POTENTIALLY_AFFECTED as INDUSTRIES_POTENTIALLY_AFFECTED, 
e.EVENT_COMPANIES_POTENTIALLY_AFFECTED as COMPANIES_POTENTIALLY_AFFECTED, 
e.EVENT_EXTERNAL_LINKS as EVENT_EXTERNAL_LINKS,
e.EVENT_RELATED_LINKS as EVENT_RELATED_LINKS, 
e.EVENT_REGION_COORDINATES as EVENT_REGION_COORDINATES,
ie.ESTIMATED_ARRIVAL_DATE as ESTIMATED_ARRIVAL_DATE, 
ie.MASTER_BILL_OF_LADING_NUMBER as MASTER_BILL_OF_LADING_NUMBER, 
ie.HOUSE_BILL_OF_LADING_NUMBER as HOUSE_BILL_OF_LADING_NUMBER, 
ie.FOREIGN_PORT_OF_LADING as FOREIGN_PORT_OF_LADING, 
ie.PLACE_OF_RECEIPT as PLACE_OF_RECEIPT, 
ie.PORT_OF_UNLADING as PORT_OF_UNLADING, 
ie.PRODUCT_KEYWORDS as PRODUCTS_POTENTIALLY_AFFECTED,
ie.ESTIMATED_SHIPMENT_VALUE as ESTIMATED_SHIPMENT_VALUE, 
ie.TOTAL_WEIGHT as TOTAL_WEIGHT, 
ie.TOTAL_WEIGHT_UNIT as TOTAL_WEIGHT_UNIT, 
ie.MEASUREMENT as MEASUREMENT, 
ie.MEASUREMENT_UNIT as MEASUREMENT_UNIT 
FROM
    IMPORTS_DURING_EVENTS ie JOIN USA_CBP.EVENTS e 
    ON
    e.EVENT_ID = ie.EVENT_ID
    AND e.EVENT_PUBLICATION_DATE = ie.EVENT_FIRST_DATE)
;

"""

## Creating HARMONIZED.IMPORTS_PARTY_REL_V
def create_harmonized_imports_party_view(session):
    session.use_database('DB_DAMG7245_TEAM7')
    session.use_schema('HARMONIZED')
    _ = session.sql(SQL_V_FLAT_IMPORTS_EVENT).collect()

    return "Success: HARMONIZED.V_FLAT_IMPORTS_EVENT Created"

# For local debugging
if __name__ == "__main__":
    # Add the utils package to our path and import the snowpark_utils function
    import os, sys
    current_dir = os.getcwd()
    parent_dir = os.path.dirname(current_dir)
    sys.path.append(parent_dir)

    from utils import snowpark_utils
    session = snowpark_utils.get_snowpark_session()

    print(create_harmonized_imports_party_view(session))

    session.close()